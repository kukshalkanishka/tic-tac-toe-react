{"version":3,"sources":["square.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","id","react_default","a","createElement","className","onClick","insertSymbol","bind","value","Component","App","winningMoves","players","symbol","moves","state","squares","Array","fill","currentPlayerIndex","superSet","subset","every","includes","_this2","playerMoves","some","isSubset","_this3","setState","currentPlayer","push","status","checkWinningCondition","square","renderStatus","renderSquare","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAqBeA,oBAjBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,GAAKP,EAAKD,MAAMQ,GAFJP,wEAMjB,OACEQ,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVC,QAAST,KAAKJ,MAAMc,aAAaC,KAAK,KAAMX,KAAKI,KAEhDJ,KAAKJ,MAAMgB,cAZCC,cCkFNC,cAhFb,SAAAA,EAAYlB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,IACjBjB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgB,GAAAX,KAAAH,KAAMJ,KACDmB,aAAe,CAClB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAETlB,EAAKmB,QAAU,CAAC,CAAEC,OAAQ,IAAKC,MAAO,IAAM,CAAED,OAAQ,IAAKC,MAAO,KAClErB,EAAKsB,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,mBAAoB,GAbL1B,wEAiBV2B,EAAUC,GACjB,OAAOA,EAAOC,MAAM,SAAAd,GAAK,OAAIY,EAASG,SAASf,qDAGzB,IAAAgB,EAAA5B,KAClB6B,EAAc7B,KAAKgB,QAAQhB,KAAKmB,MAAMI,oBAAoBL,MAC9D,OAAOlB,KAAKe,aAAae,KAAK,SAAAZ,GAAK,OAAIU,EAAKG,SAASF,EAAaX,0CAGvDd,GAAI,IAAA4B,EAAAhC,KACfA,KAAKiC,SAAS,SAAAd,GACZ,IAAIe,EAAgBF,EAAKhB,QAAQG,EAAMI,oBAIvC,OAHAJ,EAAMC,QAAQhB,GAAM8B,EAAcjB,OAClCiB,EAAchB,MAAMiB,KAAK/B,GACzBe,EAAMI,oBAAsBJ,EAAMI,mBAAqB,GAAK,EACrDJ,2CAKT,IAAIe,EAAgBlC,KAAKgB,QAAQhB,KAAKmB,MAAMI,oBACxCa,EAAS,uBAAyBF,EAAcjB,OAKpD,OAJejB,KAAKqC,0BAElBD,EAAS,WAAaF,EAAcjB,QAE/BmB,uCAGIhC,GACX,OACEC,EAAAC,EAAAC,cAAC+B,EAAD,CACE1B,MAAOZ,KAAKmB,MAAMC,QAAQhB,GAC1BA,GAAIA,EACJM,aAAcV,KAAKU,aAAaC,KAAKX,yCAMzC,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,WAAMP,KAAKuC,gBACXlC,EAAAC,EAAAC,cAAA,WACGP,KAAKwC,aAAa,GAClBxC,KAAKwC,aAAa,GAClBxC,KAAKwC,aAAa,IAErBnC,EAAAC,EAAAC,cAAA,WACGP,KAAKwC,aAAa,GAClBxC,KAAKwC,aAAa,GAClBxC,KAAKwC,aAAa,IAErBnC,EAAAC,EAAAC,cAAA,WACGP,KAAKwC,aAAa,GAClBxC,KAAKwC,aAAa,GAClBxC,KAAKwC,aAAa,YA1EX3B,aCQE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0a7b4f32.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass Square extends Component {\n  constructor(props) {\n    super(props);\n    this.id = this.props.id;\n  }\n\n  render() {\n    return (\n      <div\n        className=\"square\"\n        onClick={this.props.insertSymbol.bind(null, this.id)}\n      >\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nexport default Square;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Square from \"./square\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.winningMoves = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8]\n    ];\n    this.players = [{ symbol: \"X\", moves: [] }, { symbol: \"O\", moves: [] }];\n    this.state = {\n      squares: Array(9).fill(null),\n      currentPlayerIndex: 0\n    };\n  }\n\n  isSubset(superSet, subset) {\n    return subset.every(value => superSet.includes(value));\n  }\n\n  checkWinningCondition() {\n    let playerMoves = this.players[this.state.currentPlayerIndex].moves;\n    return this.winningMoves.some(moves => this.isSubset(playerMoves, moves));\n  }\n\n  insertSymbol(id) {\n    this.setState(state => {\n      let currentPlayer = this.players[state.currentPlayerIndex];\n      state.squares[id] = currentPlayer.symbol;\n      currentPlayer.moves.push(id);\n      state.currentPlayerIndex = (state.currentPlayerIndex + 1) % 2;\n      return state;\n    });\n  }\n\n  renderStatus() {\n    let currentPlayer = this.players[this.state.currentPlayerIndex];\n    let status = \"Next player symbol: \" + currentPlayer.symbol;\n    const hasWon = this.checkWinningCondition();\n    if (hasWon) {\n      status = \"Winner: \" + currentPlayer.symbol;\n    }\n    return status;\n  }\n\n  renderSquare(id) {\n    return (\n      <Square\n        value={this.state.squares[id]}\n        id={id}\n        insertSymbol={this.insertSymbol.bind(this)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div>{this.renderStatus()}</div>\n        <div>\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div>\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div>\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}